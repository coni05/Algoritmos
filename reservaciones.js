let saldo = 0; // Se inicializa el saldo del cajero con 0
let transacciones = []; // Se inicializa una lista vac√≠a para almacenar las √∫ltimas transacciones (m√°ximo 5)

// Registrar una transacci√≥n
function registrarTransaccion(monto) {
    // Si ya hay 5 transacciones almacenadas, eliminar la m√°s antigua para mantener el l√≠mite
    if (transacciones.length >= 5) {
        transacciones.shift(); // Elimina el primer elemento (la transacci√≥n m√°s antigua)
    }
    transacciones.push(monto); // Agrega la nueva transacci√≥n al final del arreglo
}

// Consultar saldo
function consultarSaldo() {
    // Muestra una alerta con el saldo actual, formateado a 2 decimales y un √≠cono de dinero
    alert(`üí∞ Saldo actual: $${saldo.toFixed(2)}`);
}

// Depositar dinero
function depositar() {
    // Solicita al usuario ingresar un monto para depositar y lo convierte a n√∫mero decimal
    let monto = parseFloat(prompt("Ingrese el monto a depositar: $"));
    // Valida que el monto sea un n√∫mero v√°lido y positivo
    if (isNaN(monto) || monto <= 0) {
        alert("‚ùå Monto inv√°lido."); // Si no es v√°lido, muestra error y termina la funci√≥n
        return;
    }
    saldo += monto; // Suma el monto al saldo actual
    registrarTransaccion(monto); // Registra la transacci√≥n como un dep√≥sito (positivo)
    alert(`‚úÖ Se depositaron $${monto.toFixed(2)}`); // Confirma el dep√≥sito al usuario
}

// Retirar dinero
function retirar() {
    // Solicita al usuario ingresar un monto para retirar y lo convierte a n√∫mero decimal
    let monto = parseFloat(prompt("Ingrese el monto a retirar: $"));
    // Valida que el monto sea un n√∫mero v√°lido y positivo
    if (isNaN(monto) || monto <= 0) {
        alert("‚ùå Monto inv√°lido."); // Si no es v√°lido, muestra error y termina la funci√≥n
        return;
    }
    // Comprueba que el saldo sea suficiente para realizar el retiro
    if (monto > saldo) {
        alert("‚ö†Ô∏è Saldo insuficiente."); // Si no hay saldo suficiente, muestra advertencia y termina
        return;
    }
    saldo -= monto; // Resta el monto del saldo actual
    registrarTransaccion(-monto); // Registra la transacci√≥n como un retiro (negativo)
    alert(`‚úÖ Se retiraron $${monto.toFixed(2)}`); // Confirma el retiro al usuario
}

// Mostrar transacciones
function mostrarTransacciones() {
    // Si no hay transacciones registradas, informa al usuario
    if (transacciones.length === 0) {
        alert("üìú No hay transacciones registradas.");
    } else {
        // Construye un mensaje con el listado de las √∫ltimas transacciones
        let mensaje = "üìú √öltimas transacciones:\n";
        transacciones.forEach((t, i) => {
            // Determina el tipo de transacci√≥n (positivo: dep√≥sito, negativo: retiro)
            let tipo = t > 0 ? "Dep√≥sito" : "Retiro";
            // A√±ade la transacci√≥n al mensaje con su n√∫mero, tipo y monto absoluto formateado
            mensaje += `${i + 1}. ${tipo}: $${Math.abs(t).toFixed(2)}\n`;
        });
        alert(mensaje); // Muestra el mensaje completo al usuario
    }
}

// Men√∫ principal
function menu() {
    let opcion;
    // Bucle que se repite hasta que el usuario elija salir (opci√≥n "5")
    do {
        // Solicita al usuario seleccionar una opci√≥n del men√∫
        opcion = prompt(
            "--- Cajero Autom√°tico ---\n" +
            "1. Consultar saldo\n" +
            "2. Depositar dinero\n" +
            "3. Retirar dinero\n" +
            "4. Ver √∫ltimas transacciones\n" +
            "5. Salir\n\n" +
            "Seleccione una opci√≥n:"
        );

        // Ejecuta la funci√≥n correspondiente seg√∫n la opci√≥n seleccionada
        switch (opcion) {
            case "1":
                consultarSaldo();
                break;
            case "2":
                depositar();
                break;
            case "3":
                retirar();
                break;
            case "4":
                mostrarTransacciones();
                break;
            case "5":
                alert("üëã Gracias por usar el cajero. ¬°Hasta luego!");
                break;
            default:
                alert("‚ùå Opci√≥n inv√°lida."); // Si la opci√≥n no es v√°lida, informa al usuario
        }
    } while (opcion !== "5"); // Repite mientras el usuario no elija salir
}

// Ejecutar el men√∫ para iniciar el cajero autom√°tico
menu();
