// Inicializa el saldo de la cuenta en 0 y un arreglo vac√≠o para las transacciones.
let saldo = 0;
let transacciones = [];

// Funci√≥n para registrar una transacci√≥n (dep√≥sito o retiro) en el arreglo de transacciones.
function registrarTransaccion(monto) {
  // Si ya hay 5 transacciones registradas, elimina la m√°s antigua.
  if (transacciones.length >= 5) {
    transacciones.shift(); // Elimina el primer elemento del arreglo.
  }
  // Agrega la nueva transacci√≥n (dep√≥sito o retiro) al final del arreglo.
  transacciones.push(monto);
}

// Funci√≥n para consultar el saldo actual de la cuenta.
function consultarSaldo() {
  // Muestra una ventana emergente (alert) con el saldo actual, con dos decimales.
  alert(`üí∞ Saldo actual: $${saldo.toFixed(2)}`);
}

// Funci√≥n para realizar un dep√≥sito.
function depositar() {
  // Solicita al usuario el monto a depositar.
  let input = prompt("Ingrese el monto a depositar:");
  // Convierte la entrada a un n√∫mero decimal.
  let monto = parseFloat(input);

  // Verifica si el monto es un n√∫mero v√°lido y mayor que 0.
  if (isNaN(monto) || monto <= 0) {
    alert("‚ùå Monto inv√°lido."); // Si no es v√°lido, muestra un mensaje de error.
    return; // Termina la funci√≥n sin realizar el dep√≥sito.
  }

  // Suma el monto depositado al saldo actual.
  saldo += monto;
  // Registra la transacci√≥n (dep√≥sito) en el arreglo de transacciones.
  registrarTransaccion(monto);
  // Muestra una ventana emergente con el monto depositado.
  alert(`‚úÖ Se depositaron $${monto.toFixed(2)}`);
}

// Funci√≥n para realizar un retiro.
function retirar() {
  // Solicita al usuario el monto a retirar.
  let input = prompt("Ingrese el monto a retirar:");
  // Convierte la entrada a un n√∫mero decimal.
  let monto = parseFloat(input);

  // Verifica si el monto es un n√∫mero v√°lido y mayor que 0.
  if (isNaN(monto) || monto <= 0) {
    alert("‚ùå Monto inv√°lido."); // Si no es v√°lido, muestra un mensaje de error.
    return; // Termina la funci√≥n sin realizar el retiro.
  }

  // Verifica si el monto es mayor que 500, el l√≠mite permitido por operaci√≥n.
  if (monto > 500) {
    alert("‚ö†Ô∏è No puedes retirar m√°s de $500 por operaci√≥n."); // Si excede el l√≠mite, muestra un mensaje de advertencia.
    return; // Termina la funci√≥n sin realizar el retiro.
  }

  // Verifica si el saldo es suficiente para realizar el retiro.
  if (monto > saldo) {
    alert("‚ö†Ô∏è Saldo insuficiente."); // Si no hay suficiente saldo, muestra un mensaje de advertencia.
    return; // Termina la funci√≥n sin realizar el retiro.
  }

  // Resta el monto retirado del saldo.
  saldo -= monto;
  // Registra la transacci√≥n (retiro) como un n√∫mero negativo.

  registrarTransaccion(-monto);

  // Muestra una ventana emergente con el monto retirado.

  alert(`‚úÖ Se retiraron $${monto.toFixed(2)}`);

}

// Funci√≥n para ver las √∫ltimas transacciones realizadas.
function verTransacciones() {
  alert("üìú √öltimas transacciones:"); // Muestra el encabezado para las transacciones.
  
  // Verifica si no hay transacciones registradas.
  if (transacciones.length === 0) {
    alert("No hay transacciones registradas."); // Si no hay transacciones, muestra un mensaje.
    return; // Termina la funci√≥n.
  }
  
  // Recorre todas las transacciones registradas y muestra cada una.
  transacciones.forEach((t, i) => {
    // Determina si la transacci√≥n fue un dep√≥sito o un retiro.
    let tipo = t > 0 ? "Dep√≥sito" : "Retiro";
    // Muestra cada transacci√≥n en una ventana emergente (alert), con el tipo y el monto.
    alert(`${i + 1}. ${tipo}: $${Math.abs(t).toFixed(2)}`);
  });
}

// Funci√≥n para mostrar el men√∫ principal y manejar las opciones del usuario.
function menu() {
  let opcion;
  do {
    // Muestra el men√∫ con las opciones disponibles para el usuario.
    opcion = prompt(
      "\n--- Cajero Autom√°tico ---\n1. Consultar saldo\n2. Depositar\n3. Retirar\n4. Ver transacciones\n5. Salir\nSeleccione una opci√≥n:"
    );

    // Usa una estructura de control (switch) para realizar una acci√≥n seg√∫n la opci√≥n seleccionada.
    switch (opcion) {
      case "1":
        consultarSaldo(); // Llama a la funci√≥n para consultar el saldo.
        break;
      case "2":
        depositar(); // Llama a la funci√≥n para realizar un dep√≥sito.
        break;
      case "3":
        retirar(); // Llama a la funci√≥n para realizar un retiro.
        break;
      case "4":
        verTransacciones(); // Llama a la funci√≥n para ver las transacciones.
        break;
      case "5":
        alert("üëã Gracias por usar el cajero."); // Muestra un mensaje de despedida.
        break;
      default:
        alert("‚ùå Opci√≥n inv√°lida."); // Muestra un mensaje si la opci√≥n no es v√°lida.
    }
  } while (opcion !== "5"); // Repite el men√∫ hasta que el usuario seleccione la opci√≥n "5" para salir.
}

// Inicia el cajero mostrando el men√∫ y permitiendo al usuario interactuar.
menu();



